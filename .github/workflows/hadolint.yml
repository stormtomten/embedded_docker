# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# hadoint is a Dockerfile linter written in Haskell
# that helps you build best practice Docker images.
# More details at https://github.com/hadolint/hadolint

name: Hadolint

on:
  push:
    branches: [ main, develop]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
    # schedule:
    #- cron: '*/60 * * * *'

permissions:
  contents: read

jobs:
  hadolint:
    name: Run hadolint scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run hadolint
        uses: hadolint/hadolint-action@f988afea3da57ee48710a9795b6bb677cc901183
        with:
          dockerfile: ./src/dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload SARIF file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-results
          path: hadolint-results.sarif

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif
          wait-for-processing: true

      # Setup docker for Arm
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm/v7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker buildx build --platform linux/arm/v7 --build-arg ZSH=y -t rpi5 --load ./src

      # Run Docker container
      - name: Run Docker container
        run: |
          docker run -d --name rpi5-test -p 2222:22 rpi5

      - name: Start SSH server
        run: |
          sudo service ssh start
          sudo service ssh status
          sudo netstat -tuln | grep 2222 || (echo "Port 2222 is not open" && exit 1)

      # Wait for SSH
      - name: Wait for SSH
        run: |
          for i in {1..20}; do
            if nc -z localhost 2222; then
              echo "SSH is ready!"
              exit 0
            fi
            echo "Waiting for SSH..."
            sleep 2
          done
          echo "SSH failed to start." && exit 1


      - name: Test SSH connection
        run: |
          set -e
          if sshpass -p "pass" ssh -tt -o StrictHostKeyChecking=no user@localhost -p 2222 << EOF
          echo "Connected over SSH!"
          picotool --help || (echo "picotool not available" && exit 1)
          EOF
          then
            echo "SSH test passed!"
          else
            echo "SSH test failed!"
            exit 1
          fi

      - name: Dump container logs on failure
        if: failure() && steps.ssh_test.outcome == 'failure'
        run: |
          echo "=== SSH server logs from container ==="
          docker logs rpi5-test || echo "Could not fetch logs!"


      - name: Verify oh-my-zsh installation
        run: |
          sshpass -p "pass" ssh -o StrictHostKeyChecking=no user@localhost -p 2222 <<EOF
          if [ -f "\$HOME/.oh-my-zsh/tools/upgrade.sh" ]; then
            echo "oh-my-zsh is installed! Running upgrade.sh to confirm functionality..."
            bash \$HOME/.oh-my-zsh/tools/upgrade.sh || (echo "oh-my-zsh upgrade failed!" && exit 1)
            echo "oh-my-zsh is properly installed and functional!";
          else
            echo "oh-my-zsh is not installed!" && exit 1;
          fi
          EOF

      # Cleanup
      - name: Stop and remove the container
        run: |
          docker stop rpi5-test
          docker rm rpi5-test
