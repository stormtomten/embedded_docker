# Base image (balenalib raspberry debian bookworm)
FROM balenalib/raspberrypi5-debian:bookworm

# Pipefail config
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Variable for zsh install
ARG ZSH=n

# Install pakages
RUN APT_PACKAGES=( \
    locales \
    build-essential \
    cmake \
    gcc-arm-none-eabi \
    libnewlib-arm-none-eabi \
    libstdc++-arm-none-eabi-newlib \
    gdb-multiarch \
    openssh-server \
    sudo \
    vim \
    nano \
    git \
    gh \
    python3 \
    python3-poetry \
    ) && \
    if [ "$ZSH" = "y" ]; then \
        APT_PACKAGES+=("zsh"); \
    else \
        echo "Skipping zsh"; \
    fi && \
    apt-get update && \
    apt-get install -y --no-install-recommends "${APT_PACKAGES[@]}" && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Generate and set Swedish locale
RUN echo "sv_SE.UTF-8 UTF-8" >> /etc/locale.gen && \
    locale-gen sv_SE.UTF-8 && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    update-locale LANG=sv_SE.UTF-8 LC_ALL=sv_SE.UTF-8

# Set environment variables
ENV LANG=sv_SE.UTF-8
ENV LC_ALL=sv_SE.UTF-8

# Verify locale is set
RUN locale
    
# Create the SSH run directory and configure SSH settings (password but no root)
RUN mkdir /var/run/sshd && \
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config

# Installing pico-sdk VERSION 2.1.1
RUN rm -rf /opt/pico-sdk && \
    git clone https://github.com/raspberrypi/pico-sdk.git /opt/pico-sdk
WORKDIR /opt/pico-sdk && \
RUN git checkout 2.1.1 && \
    git submodule update --init --recursive && \
    rm -f /etc/profile.d/piko-sdk.sh && \
    echo 'export PICO_SDK_PATH=/opt/pico-sdk' > /etc/profile.d/pico-sdk.sh

# Installing picotool 
RUN rm -rf /opt/picotool && \
    git clone https://github.com/raspberrypi/picotool.git /opt/picotool && \
    mkdir build
WORKDIR /opt/picotool/build
RUN cmake .. -DPICO_SDK_PATH=/opt/pico-sdk &&\
    make && make install

# Create user and set password using arguments during build
ARG USERNAME=user
ARG PASSWORD=pass
RUN useradd -m -s /bin/bash "${USERNAME}" && \
    echo "${USERNAME}:${PASSWORD}" | chpasswd && \
    usermod -aG sudo "${USERNAME}" && \
    if [ "$ZSH" = "y" ]; then \
        usermod -s "$(which zsh)" "${USERNAME}"; \
    fi

# Create ws directory and setup for pico-sdk path plus .vimrc in the user's home directory
WORKDIR /home/${USERNAME}
RUN su - ${USERNAME} -c "mkdir -p /home/${USERNAME}/ws /home/${USERNAME}/share && \
    printf 'set nocompatible\nsyntax on\nfiletype plugin indent on\n' >> ~/.vimrc && \
    echo 'export PICO_SDK_PATH=/opt/pico-sdk\n' >> ~/.bashrc &&\
    if [ \"${ZSH}\" = \"y\" ]; then \
        export HOME=~ &&\
        curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -o install.sh && \
        bash install.sh --unattended && \
        rm install.sh && \
        echo 'export PICO_SDK_PATH=/opt/pico-sdk\n' >> ~/.zshrc;\
    else \
        echo 'Skipping oh-my-zsh'; \
    fi"

# Expose SSH port
EXPOSE 22

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:22 || exit 1

# Copy en set entrypoint script
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Set the entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# Add a shared directory as a volume
#VOLUME ["/home/${USERNAME}/share"]

# Keep the container running indefinetly
# CMD ["tail", "-f", "/dev/null"]
CMD ["/usr/sbin/sshd", "-D"]
